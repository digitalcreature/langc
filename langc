#!/usr/bin/env lua5.3

require "util"
require "args"
require "compile"

local outputname = "a.out"

function args:printhelpheader()
	print("usage: "..arg[0]:match("([%w_]+)").." [options] [source ...]")
end

function options:help()
	args:printhelp()
end
options.help:init("print help")

function options:output(target)
	outputname = target
end
options.output:init("set output file", 1, "<file>")

local params = args:parse(arg)
if not params then
	os.exit(1)
end

local ifiles = {}

for i, param in ipairs(params) do
	local ifile, error= io.open(param, "r")
	if ifile then
		ifiles[i] = ifile
	else
		printf("error: %s", error)
		for _, ifile in ipairs(ifiles) do
			ifile:close()
		end
		return 1
	end
end

token.types["local"] = "keyword"
token.types["do"] = "keyword"
token.types["end"] = "keyword"
token.types["if"] = "keyword"
token.types["then"] = "keyword"
token.types["else"] = "keyword"
token.types["elseif"] = "keyword"
token.types["for"] = "keyword"
token.types["while"] = "keyword"
token.types["repeat"] = "keyword"
token.types["until"] = "keyword"

token.types["="] = "assignment operator"
token.types["+"] = "addition operator"
token.types["-"] = "subtraction operator"
token.types["+="] = "addition assignment operator"
token.types["-="] = "subtraction assignment operator"

function token.types:identifier(c)
	if not self.value then
		if c:match("[%a_]") then
			self.value = c
		else
			return true
		end
	else
		if c:match("[%w_]") then
			self.value = self.value..c
		else
			return self()
		end
	end
end

local digits = {}
digits["0"] = 0
digits["1"] = 1
digits["2"] = 2
digits["3"] = 3
digits["4"] = 4
digits["5"] = 5
digits["6"] = 6
digits["7"] = 7
digits["8"] = 8
digits["9"] = 9

function token.types:intliteral(c)
	if not self.value then
		if c:match("[%+%-]") then
			self.value = c;
		else
			self.value = digits[c]
			if not self.value then
				return true
			end
		end
		return
	end
	local digit = digits[c]
	if digit then
		if type(self.value) == "number" then
			self.value = self.value * 10 + digit
		else
			if digit > 0 then
				self.value = digit * (self.value == "-" and -1 or 1)
			end
		end
	else
		if type(self.value) == "number" then
			return self()
		else
			return true
		end
	end
end

for _, ifile in ipairs(ifiles) do
	for t, l, c in token.tokenize(ifile) do
		print(t, l, c)
	end
	ifile:close()
end
